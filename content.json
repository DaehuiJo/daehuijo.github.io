{"meta":{"title":"personal papers","subtitle":"Personal papers for Programing","description":"programing record","author":"jay","url":"http://daehuijo.github.io"},"pages":[],"posts":[{"title":"Which Linux should I use","slug":"linux-Which-Linux-should-I-use","date":"2017-04-20T08:41:08.000Z","updated":"2017-04-22T15:32:28.862Z","comments":true,"path":"2017/04/20/linux-Which-Linux-should-I-use/","link":"","permalink":"http://daehuijo.github.io/2017/04/20/linux-Which-Linux-should-I-use/","excerpt":"","text":"[이미지 출처: http://q-linux.com/] 리눅스 구축환경 결정리눅스 환경을 구축하는 방법으로는 세 가지로 볼 수 있다. 현재 사용중인 PC의 운영체제로써 배포판을 직접 설치하거나(또는 Multi-booting을 이용하여 하나의 PC에 윈도우와 리눅스를 공존시켜 부팅시 선택) 가상머신(VMware, Virtual BOX, Parallels)을 이용하여 운용할 수 있으며, AWS, Google cloud platform, MS Azure와 같은 PasS(Platform as a Service)를 이용하여 리눅스 환경을 구축할 수 있다. 또한 Raspberry Pi, Banana Pi (라즈베리파이의 아류. 중국 선적의 LeMaker에서 제작, 사용평은…), Rikomagic의 Stick PC 등과 같은 단일 보드 컴퓨터에 리눅스 환경을 구축할 수 있다. 리눅스 배포판 결정[출처: http://distrowatch.com/] 4/20/2017 국내에서 널리 알려진 리눅스 배포판은 주로 레드햇 사의 레드햇 엔터프라이즈 리눅스(RHEL)와 계보를 같이하는 페도라(Fedora), 센트OS(CentOS)가 있으며, 데비안으로 부터 파생된 우분투(ubuntu), 민트(Mint)가 있다. 그리고 스마트폰에 탑재되는 안드로이드(Android)가 있다. Debian 데비안은 지금까지 사용되고 있는 리눅스 배포판 중 2번째로 오래되었다. 데비안의 특징은 패키지 설치 및 업그레이드에 있다. 이와 더불어 다른 패키지와의 의존성 등을 apt를 이용하여 쉽게 설정할 수 있으며, 이에 따라 알맞은 서버를 구축할 수 있다. 우분투와 같은 명령어와 디렉토리 구조를 가졌기 때문에 우분투를 경험한 경우 다른 계열의 배포판 보다는 데비안을 선택하는 것이 효율적이다. 기업의 경우 사후지원 필요여부에 따라 레드헷과 데비안으로 갈리게 된다. Ubuntu 우분투는 데비안 계열의 리눅스 중 가장 성공한 desktop 배포판이다. 데비안으로부터 이어받은 APT를 통해 소프트웨어의 설치·관리·제거를 쉽게 할 수 있기 때문에 리눅스뿐만 아니라 컴퓨터 자체를 처음 접하는 이들에게 있어서도 리눅스 배포판 중에서는 최고라고 할 수 있다. 하드웨어 인식에서 플러그 앤 플레이 기능도 뛰어나 USB든 블루투스든 뭐든지 일단 연결하면 거의 다 작동한다. 이는 일반인들의 리눅스에 대한 인식, 즉 “컴퓨터 전문가들이나 쓰는 OS”와 크게 다르다. 쉽고 편하게 사용할 수 있는 운영체제를 목표로 잡고있기 때문에 복잡한 인스톨 과정이나 커맨드라인 명령어 같은 것들을 전혀 몰라도 사용하는데 지장이 없다. 또한 MS Office나 Photo Shop 등을 대체할 수 있는 여러 소프트웨어들이 무료로 제공된다. Mint 민트는 우분투 기반의 리눅스 배포판으로서 우분투의 단점을 보완하기 위해 시작되었다. 우분투와은 가장 큰 차이로는 GUI를 뽑을 수 있다. 윈도우 환경과 최대한 유사하게 구성되어 있어 리눅스를 처음 접한 사용자도 쉽게 접근할 수 있다. 제작 기반이 두 가지인 것도 특징 중 하나다. 우분투를 기반으로 한 것과 데비안을 기반으로 한 것이 있다. 우분투 기반은 우분투 저장소를 쓰고 데비안 기반은 데비안 저장소를 쓴다. 데비안 기반의 민트는 LMDE라고 해서 세미롤링 업데이트를 지원한다. 아치 리눅스 처럼 계속해서 조금씩 업데이트가 되는 방식이다. 우분투 기반과는 다르게 LMDE는 데비안처럼 계속해서 업데이트가 되기 때문에 지원기간 만료를 신경쓸 필요가 없이 한번설치하면 재설치 없이 항상 최신버전으로 유지가능하다. 안정판기준 데비안 기반답게 LMDE의 패키지 업데이트 속도는 상당히 늦은 편이다. 다만 LMDE의 경우 어느정도 리눅스 지식을 갖고있지않다면 사용하기 힘든면이있다. RHEL(Redhat Enterprise Linux) 레드헷은 리눅스 서버시장의 강자로 군림하고 있다. 다른 배포판들과는 다르게 라이센스를 구입하여 운용해야하지만(상용이 아닌 개발용은 무료) 그에 따른 사후관리(기술지원) 비용이라고 할 수 있으며 자체적인 솔루션들을 판매하고 있다. 기술지원과 뛰어난 서버 운영 솔루션을 가지고 있기 때문에 많은 기업들이 레드헷을 선호한다. 2003년 레드헷 배포판의 판매 및 중지하였으며 Fedora를 후원하여 대신하고 있다. 레드헷의 업데이트가 이루어지기 전에 배포판인 Fedora를 통해 먼저 발표된다. CentOS 페도라와는 RHEL 소스 기반이지만 페도라와는 다르게 철절히 최신 버전의 RHEL을 미러링하는데 중점에 두고 있다. 따라서 RHEL에 대한 추가나 제거를 최대한 자제하고 있기 때문에 기술지원을 제외한 RHEL을 그대로 사용하는 것이라고 볼 수 있다. 국내에서는 서버용 리눅스 배포판으로 가장 높은 인기를 구가하고 있다. Fedora 페도라는 RHEL에 추가할 기능들을 먼저 테스트하기 위해 기능이 개발될 때 마다 지속적인 업데이트 이루워진다. 개발에 용이한 여러가지 툴들을 제공해주며 잘 활용한다면 유용하게 사용할 수 있다. KaliLinux 칼리는 Offensive Security에서 만든 모의 침투 테스트용 운영체제이다. 따라서 해킹에 필요한 많은 툴들을 제공하고 있다. BackTrack의 후속버전으로 BackTrack이 운영체제로써의 완성도는 타 배포판의 베타정도로 떨어졌었지만 Kali에서 끌어올렸다. ArchLinux 아치리눅스는 리눅스 배포판중에서는 소프트웨어 업데이트 속도가 가장 빠르다. 패키지 관리자로는 팩맨을 사용한다. 처음 시작할 때 CUI를 띄우는 것 부터 시작해서 손수 세팅할것을 요구한다. 하지만 이는 아치리눅스의 중요한 특징으로 처음 설치를 할 때 기본적인 틀만 짜인 상태에서 유저가 알아서 자신만의 OS를 만들어간다. 설치부터 쓸만한 하나의 운영체제가 될 때 까지 만들어가는 게 오래 걸리긴 하지만 운영체제의 구석구석을 돌아다니면서 배울 수 있는 것도 많고, 웬만한 설정파일은 유저의 손을 한번씩 거치므로 뭔가가 꼬였을 때 풀어나갈 수 있는 안목도 기르게 된다. Manjaro Linux 아치 리눅스 기반 배포판. 굉장히 가벼운 아치 리눅스의 컨셉을 가져오면서도 우분투 계열의 사용성을 확보하기 위해 많은 노력을 기울인다. 공식 데스크탑 환경은 Xfce, KDE, GNOME이며 만자로 리눅스 커뮤니티에서 지원하는 거의 모든 데스크탑 환경을 지원한다. 각각의 데스크탑 환경에 맞는 버전을 설치해도 그 데스크탑 환경의 부속 어플리케이션을 설치와 함께 모두 제공하지 않는다. 말 그대로 필수적인 어플리케이션만 포함하고 나머지 어플리케이션은 사용자 입맛에 맞게 저장소에서 설치하면 된다. GUI 세팅 창에서 몇 번 클릭만 하면 아치 리눅스의 유저 저장소(Repository)인 AUR을 사용하도록 설정할 수 있고, 라이트 유저용 어플리케이션은 AUR에서 컴파일해도 대부분 호환된다. 또한 CLI 기반인 팩맨 뿐 아니라 GUI 기반의 패키지 관리자를 기본으로 끼워주며, 이 패키지 관리자 역시 불필요한 기능은 싹 빼고 패키지 관리와 검색 및 업데이트 외의 잡기능은 제공하지 않는다. 참고 나무위키: 리눅스 지식나눔 블로그: 리눅스 배포판 종류 및 선택 itworld: 초보자를 위한 리눅스 시작가이드 itworld: “리눅스 초보 탈출”…초심자용 리눅스 배포판 3종 고르기","categories":[{"name":"Linux","slug":"Linux","permalink":"http://daehuijo.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://daehuijo.github.io/tags/linux/"}]},{"title":"spring projects","slug":"spring-20170413-spring-projects","date":"2017-04-12T22:48:12.000Z","updated":"2017-04-22T11:30:39.193Z","comments":true,"path":"2017/04/13/spring-20170413-spring-projects/","link":"","permalink":"http://daehuijo.github.io/2017/04/13/spring-20170413-spring-projects/","excerpt":"","text":"Spring project icons.zip [이미지 출처: https://spring.io/] Spring IO Platform스프링 IO는 현대적인 애플리케이션을 위해서 응집력 있고 버전관리가 된 기본적인 플랫폼안에 핵심(core) 스프링 API를 함께 제공한다. Spring Boot작은 스프링 구성과 함께 언제든지 실행할 수 있는 스프링 애플리케이션을 만들수 있게 도와준다. Spring Framework자바로 엔터프라이즈 애플리케이션을 만들 때 포괄적으로 사용할 수 있는 Programming 및 Configuration 모델을 제공해주는 프레임워크이다. http://codingcoding.tistory.com/29 https://gs.saro.me/#!m=elec&amp;jn=673","categories":[{"name":"Java","slug":"Java","permalink":"http://daehuijo.github.io/categories/Java/"},{"name":"Spring","slug":"Java/Spring","permalink":"http://daehuijo.github.io/categories/Java/Spring/"}],"tags":[{"name":"spring","slug":"spring","permalink":"http://daehuijo.github.io/tags/spring/"},{"name":"framework","slug":"framework","permalink":"http://daehuijo.github.io/tags/framework/"}]},{"title":"markdown posting","slug":"hexo-20170406-markdown-posting","date":"2017-04-05T19:16:10.000Z","updated":"2017-04-18T11:00:14.574Z","comments":true,"path":"2017/04/06/hexo-20170406-markdown-posting/","link":"","permalink":"http://daehuijo.github.io/2017/04/06/hexo-20170406-markdown-posting/","excerpt":"","text":"Markdown을 이용한 Hexo 블로그 포스팅[이미지 출처: Hexo Landscape theme default image] Hexo를 이용한 포스팅 방법은 3단계로 나눌 수 있다. 새로운 포스트를 생성한 다음 GFM: Github Flavored Markdown syntax를 이용하여 포스트 내용을 작성하고 github에 배포한다. Post 생성1$ hexo new &apos;post title&apos; Hexo에서 제공하는 markdown file생성 명령어는 $ hexo new [layout] &lt;title&gt;이지만 github에 배포하기 전까지는 로컬의 내용이 반영되지 않기 때문에 무의미 하다 생각되어 이외의 내용은 고려하지 않았다. 생성된 마크다운 파일은 /source/_posts에 위치한다. Post 작성생성된 파일을 열어보면 다음과 같다. 12345---title: firstPostdate: 2017-04-15 22:18:35tags:--- Front-matter 포스트 최상단에 ---로 구분해 놓은 부분은 Front-matter라 하며, YAML 또는 JSON을 이용한 포스트 환경설정 부분이다. Front-matter가 끝나는 부분은 YAML의 경우 세 개의 대시(-) 로, JSON의 경우 세 개의 세미콜론(;)을 넣어서 구분한다. 이 부분은 scaffolds폴더의 해당 파일(이곳에서는 post.md)의 수정을 통해 초기값을 변경할 수 있다. scaffolds Front-matter 설정 값 설정 설명 layout 레이아웃 title 타이틀(파일명) date 파일 생성일 update 파일 업로드일 comments 포스트에서 comment 기능을 사용할 지 여부 category 카테고리 tag 태그 permalink 포스트의 기본 permalink를 override categories &amp; tags 태그의 경우 계층의 구분이 없기때문에 작성순서가 중요하지 않으나, 카테고리는 작성한 순서에 따라 계층구조로 적용된다. 12345678910---title: firstPostdate: 2017-04-15 22:18:35categories: - Sports - Baseballtags: - Exercise - athlete --- 본문 작성 Front-matter 다음 라인(---)부터 컨텐츠 내용을 GFM에 맞춰서 작성하면 된다. biospin님의 마크다운.md markdown editor 다양한 IDE(Visual studio) 및 editor에서 markdown 작성을 지원해주고 있다. nolboo님의 sublime Text 활용 futurecreator님의 ATOM 활용 ONE™님의 Typora 활용 Post 배포포스트 작성이 완료된 후 github에 배포하기 전 로컬서버를 통해 포스트 내용을 확인해 볼 수 있으며, 포스트를 배포하기 위해서는 정적파일을 생성해야 한다. 1$ hexo generate 정적파일이 생성된 후 원격서버에 이를 배포한다. 배포명령어는 입력하면 _config.yml에 입력했었던 repository url에 push를 하기위한 github의 정보를 요구한다. 이를 입력해주면 배포가 완료되었다는 메시지가 나타난다. 1$ hexo deploy 포스트 내용의 업데이트가 완전히 이루어 지지 않았을 경우에는 $ hexo clean을 통해 database와 public folder를 삭제한 후 다시 정적파일 생성 및 배포를 하면 된다. 기타 환경설정여기까지가 포스팅을 위한 기본적인 내용이며, 추가적인 환경설정(github namecard 추가, 네이버 &amp; 구글 사이트 등록 및 구글 광고 추가 등)은 Eric Han님의 헥소관련 포스팅에 자세히 나와있다. Hexo posting 환경 유지 /public폴더에 생성된 정적파일만 원격저장소에 저장되기 때문에 해당 블로그에 대한 설정파일(generator)을 유지하기 위해서는 github의 다른 repository에 블로그 폴더 전체파일을 push하는 방법도 있으나, 나의 경우에는 Cloud storage(dropbox)에 동기화 시켜 사용하고 있다. nodejs, git, hexo package만 설치해준 뒤, 블로그폴더 동기화를 거치면 포스팅 환경이 다시 만들어 진다. 참고사이트 Github Mastering Markdown Github Writing GitHub Flavored Markdown Spec Ciro Santilli’s markdown style guide hakawati님의 markdown과 친해지기 서울시립대 건축학부: markdown","categories":[{"name":"etc","slug":"etc","permalink":"http://daehuijo.github.io/categories/etc/"},{"name":"blog","slug":"etc/blog","permalink":"http://daehuijo.github.io/categories/etc/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://daehuijo.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://daehuijo.github.io/tags/blog/"},{"name":"markdown","slug":"markdown","permalink":"http://daehuijo.github.io/tags/markdown/"}]},{"title":"AWS ubuntu GUI","slug":"etc-aws-20170406-AWS-ubuntu-GUI","date":"2017-04-05T19:07:08.000Z","updated":"2017-04-22T10:19:13.237Z","comments":true,"path":"2017/04/06/etc-aws-20170406-AWS-ubuntu-GUI/","link":"","permalink":"http://daehuijo.github.io/2017/04/06/etc-aws-20170406-AWS-ubuntu-GUI/","excerpt":"","text":"Amazon Web Services EC2 Linux(ubuntu) GUI set up[출처: http://www.thevirtualist.org/] AWS를 이용하여 이것저것 해보면서 CLI환경이 익숙치 않아 버벅거리다, 구글링을 통해 알게된 GUI 설정방법을 기록해 두고자 한다. AWS EC2 Instance 접속 자세한 Instance 생성방법은 생략한다. egoing님의 아마존 웹서비스 수업를 참고하면 된다. 인스턴스가 생성되면 해당 인스턴스 위에서 마우스 오른쪽 키를 누르게 되면 다음과 같은 옵션들이 표시된다. 옵션목록의 최상단에 있는 Connect를 선택하게 되면 다음과 같은 창이 뜬다. 1234$ ssh -i \"암호키파일경로\" Instance계정명(ubuntu)@Public DNS Address예)$ ssh -i \"C:\\root\\dev\\AWS\\Key\\ubuntudesktop.pem\" ubuntu@ec2-13-124-20-68.ap-northeast-2.compute.amazonaws.com 윈도우의 경우에는 자신이 선호하는 SSH Client(PuTTy, xshell 등)를 이용해서 해당 인스턴스에 접속하면 된다. 리눅스의 경우 키파일에 대한 권한설정을 해준 뒤 자체 터미널을 이용하여 접속한다. (리눅스에서 키파일에 대한 경로설정 방법을 몰라서 키파일이 있는 폴더로 이동 후 접속했다.) 원격접속을 위한 프로그램 설치 및 설정package install 우분투 데스크탑 버전, vnc4server, gnome-panel, gnome-settings-daemon, nautilus, gnome-terminal을 설치한다. 12$ sudo apt-get update$ sudo apt-get install ubuntu-desktop vnc4server gnome-panel gnome-settings-daemon nautilus gnome-terminal vncserver setup 12345$ vncserver password 설정$ vncserver -kill :1$ cd .vnc$ sudo vim xstatup xstatup 파일의 하단에 다음의 내용을 추가한다. 12345678910111213141516#!/bin/shexport XKL_XMODMAP_DISABLE=1unset SESSION_MANAGERunset DBUS_SESSION_BUS_ADDRESS[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresourcesxsetroot -solid greyvncconfig -iconic &amp;gnome-panel &amp;gnome-settings-daemon &amp;metacity &amp;nautilus &amp;gnome-terminal &amp; Instance disconnect 1$ exit 원격접속 활성화reconnect 처음 인스턴스에 접속하기 위해 입력했던 명령어 중 ssh와 -i 사이에-L 5901:localhost:5901을 삽입하여 다시 접속한다. 1$ ssh -L 5901:localhost:5901 -i &quot;C:\\root\\dev\\AWS\\Key\\ubuntudesktop.pem&quot; ubuntu@ec2-13-124-20-68.ap-northeast-2.compute.amazonaws.com activate vncserver 1$ vncserver -geometry 1280x800 //자신이 원하는 화면 크기를 입력하면 된다. 원격접속 여기까지 원격접속을 위한 인스턴스 내 설정을 마쳤고 vncViewer(원격접속 프로그램)를 이용하여 인스턴스에 접속하면 된다. 접속주소는 localhost:5901이다. 경고창은 무시해도 된다. real vncViewer 원격서버 종료 1$ vncserver -kill :1 nodejs framework root 권한으로 express 실행 nojs automatic 24Hr hosting $ nohup npm start &amp;==&gt; process id 11963 $ ps -ef==&gt; current processing list $ kill [process Id]==&gt; webserver sutdown ############################################port rediection: 80번 port를 설정한 port로 자동 redirection하는 방법$ sudo iptables -A PREROUTING -t nat -i eth0 -p tcp –dport 80 -j REDIRECT –to-port 9000","categories":[{"name":"etc","slug":"etc","permalink":"http://daehuijo.github.io/categories/etc/"},{"name":"aws","slug":"etc/aws","permalink":"http://daehuijo.github.io/categories/etc/aws/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://daehuijo.github.io/tags/aws/"},{"name":"VNCviewr","slug":"VNCviewr","permalink":"http://daehuijo.github.io/tags/VNCviewr/"}]},{"title":"Spring 개발환경 설정","slug":"spring-20170403-Spring-개발환경-설정","date":"2017-04-03T14:06:16.000Z","updated":"2017-04-17T20:54:40.541Z","comments":true,"path":"2017/04/03/spring-20170403-Spring-개발환경-설정/","link":"","permalink":"http://daehuijo.github.io/2017/04/03/spring-20170403-Spring-개발환경-설정/","excerpt":"","text":"[이미지 출처: https://spring.io/] 실습환경 OS: Ubuntu 16.04.2 LTS JDK: 1.8.0_121 IDE: Eclipse_Neon.3 Release (4.6.3) Spring IDE 설치1) Eclipse [Menu] -&gt; [Help] -&gt; [Install New Software] 2) [Work with]란에http://dist.springsource.com/release/TOOLS/update/e4.6/ 입력 3) 설치할 software를 선택 후 [Next] 4) License 내용 [accept] 선택 후 [Finish] STS Plugin 설치1) Eclipse [Menu] -&gt; [Marketplace] 2) STS 검색 후 Install 또는, 공식 웹사이트 marketplace에서 install tab을 Eclipse로 Drag 하여 설치 Spring Tool Suite IDE 설치[STS 공식 다운로드 웹페이지 STS Tutorial Codejava.net - Spring MVC with STS Spring Tutorial journaldev.com - Spring core tutorial mkyong.com - Spring MVC tutorial","categories":[{"name":"Java","slug":"Java","permalink":"http://daehuijo.github.io/categories/Java/"},{"name":"Spring","slug":"Java/Spring","permalink":"http://daehuijo.github.io/categories/Java/Spring/"}],"tags":[{"name":"spring","slug":"spring","permalink":"http://daehuijo.github.io/tags/spring/"},{"name":"framework","slug":"framework","permalink":"http://daehuijo.github.io/tags/framework/"}]},{"title":"Hexo blog","slug":"hexo-20170403-Hexo-blog","date":"2017-04-03T13:39:41.000Z","updated":"2017-04-20T01:01:11.331Z","comments":true,"path":"2017/04/03/hexo-20170403-Hexo-blog/","link":"","permalink":"http://daehuijo.github.io/2017/04/03/hexo-20170403-Hexo-blog/","excerpt":"","text":"Hexo와 Github Page를 이용한 블로그 개설[이미지 출처: http://masatolan.com/images/2015/programming/1/hexo-blog-basic1.jpg] 블로그 개설을 결심하고 블로그 제공 서비스들(Naver, Tistory, Blogger, Medium)을 기웃거리면서 구글링 중 github page를 이용한 블로그에 대해 알게 되었다. Jekyll(Ruby 기반), Hugo(Go 기반), Hexo(Node.js 기반)와 같은 Static Website Generator를 이용하여 생성한 블로그를 github에 push하면 블로그 사이트가 만들어 진다. 다양한 서비스들이 있지만 그나마 알고 있는 nodejs기반 Hexo를 이용하기로 했다. 설치 software OS Windows 10 CLI Git Bash Editor Atom, Typora 1) 필요환경 Node.js Git 2) 헥소설치 Node.js와 Git을 설치한 후 터미널에서 아래 명령어를 입력하면 Hexo가 설치된다. 1$ npm install -g hexo-cli 3) 헥소 웹사이트 생성 헥소 설치가 완료된 후, hexo init 명령어를 이용하여 블로그 폴더를 생성한다. 1$ hexo init 폴더명 Start blogging with Hexo!라는 메시지와 함께 생성이 완료된다. 4) Node Package Manager 설치 터미널에서 블로그 폴더까지 이동하여 노드 패키지 매니저인 npm을 설치한다. 12$ cd 폴더명$ npm install 터미널에서 다음의 명령어로 로컬서버를 돌려, 설치가 잘 되었는지 확인한다. 1$ hexo server http://localhost:4000/로컬서버 4000번 포트에서 헥소가 동작하고 있다는 메시지가 나타난다. 해당주소를 확인해보면 다음과 같이 나타난다. 4) 테마 설치 4.1) 헥소 테마를 직접 만드는 경우 Hexo 공식 웹사이트 가이드 Jonathan Klughertz’s Create Hexo Theme Part 1, Part 2, Part 3 4.2) 만들어진 테마를 적용할 경우 Hexo 공식 웹사이트 테마페이지 헥소 공식사이트에 방문하여 적당한 테마를 선택한다. 해당 테마를 제공하는 사용자의 repository를 방문하면 설치방법이 설명되어 있다. 터미널을 열고 헥소 블로그 최상위 폴더에서 다음과 같이 입력하여 테마를 다운받는다. 1$ git clone repository주소 themes/테마명 마찬가지로, 최상위 폴더의 _config.yml의 theme 부문을 해당 테마명으로 수정한다. 1theme: 테마명 테마 업그레이드는 선택사항으로 theme/테마명폴더로 이동하여 git pull을 입력한다. 12$ cd theme/테마명$ git pull Github 연동1) github repository 생성 github page 기능을 이용하기 위해 new repository를 생성하는데 Repository name을 username.github.io로 지정해야 블로그 url을 https://username.github.io/로 지정할 수 있다. 2) hexo 설정 및 github 연동 블로그 파일을 github에 push하기 위해서 몇가지 설정을 해주어야 한다. 블로그 메인폴더에 위치한 헥소 설정파일인 _config.yml파일의 내용을 수정한다. 1234567891011# URLurl: http://daehuijo.github.io/ #생성한 repository url#root: /permalink: :year/:month/:day/:title/permalink_defaults:# Deploymentdeploy: type: git repo: https://github.com/DaehuiJo/daehuijo.github.io.git #github에 배포하기 위한 url# branch: master 3) hexo-deployer-git 플러그인 설치 로컬에 있는 마크다운 파일(.md)을 github에 배포하기 위해서는 정적파일(.html)을 생성하여 배포하여 하는데, github에 배포하기 위해서는 node package 중 hexo-deployer-git를 설치해 주어야 한다. 1$ npm install --save hexo-deployer-git 4) github에 배포 12$ hexo generate 또는 hexo g #정적 파일 생성#$ hexo deploy 또는 hexo d #github 배포# $ hexo g --d명령으로 한번에 처리할 수 도 있다. https://username.github.io/에 접속하여 github에 push가 잘 되었나 확인한다. 참고사이트 헥소 공식 페이지 Jonathan Klughertz’s Hexo article Eric Han님의 헥소관련 포스트 Willem Meints’s Get started with Hexo on Github hyunseob님의 헥소 시작하기","categories":[{"name":"etc","slug":"etc","permalink":"http://daehuijo.github.io/categories/etc/"},{"name":"blog","slug":"etc/blog","permalink":"http://daehuijo.github.io/categories/etc/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://daehuijo.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://daehuijo.github.io/tags/blog/"}]}]}